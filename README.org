An unfancy Emacs extension for [[https://huggingface.co/bigcode/starcoder]] integration.

* Installation

Add one of those to your configuration.

#+begin_src elisp

;; package-vc.el (built-in from Emacs 29 and above)
(unless (package-installed-p 'starhugger)
  (package-vc-install '(starhugger :url "https://gitlab.com/daanturo/starhugger.el")))

;; straight.el
(straight-use-package '(starhugger :url "https://gitlab.com/daanturo/starhugger.el"))

;; Doom
(package! starhugger (:url "https://gitlab.com/daanturo/starhugger.el"))

;; elpaca.el
(elpaca (starhugger :url "https://gitlab.com/daanturo/starhugger.el"))

#+end_src

Or any package manager of your choice.

This package also requires those dependencies: [[https://github.com/emacs-compat/compat][compat]], [[https://github.com/magnars/dash.el][dash]], [[https://github.com/Malabarba/spinner.el][spinner]].

* Usage

The performance may not be great, but they are asynchronous so Emacs won't be blocked.

** Primary commands

- Previewing overlay: ~starhugger-trigger-suggestion~ will show the suggestion.

~M-x~ ~starhugger-show-next-suggestion~ and ~starhugger-show-prev-suggestion~ to cycle suggestions.

~M-x~ ~starhugger-accept-suggestion~ to insert current suggestion.

~starhugger-dismiss-suggestion~ (bound to =C-g= by default when showing) to cancel.

There is also ~starhugger-auto-mode~ (non-global minor mode) but its usage isn't prioritized because of the limit rate.


** Example configuration

#+begin_src elisp

(keymap-global-set "M-\\" #'starhugger-trigger-suggestion)

(with-eval-after-load 'starhugger
  
  (setq starhugger-api-token "hf_ your token here")

  (keymap-set starhugger-inlining-mode-map "TAB" (starhugger-inline-menu-item #'starhugger-accept-suggestion))
  (keymap-set starhugger-inlining-mode-map "M-[" (starhugger-inline-menu-item #'starhugger-show-prev-suggestion))
  (keymap-set starhugger-inlining-mode-map "M-]" (starhugger-inline-menu-item #'starhugger-show-next-suggestion))
  
  (keymap-set starhugger-inlining-mode-map "M-f" (starhugger-inline-menu-item #'starhugger-accept-suggestion-by-word))

  ;; for evil users, dismiss after pressing ESC twice
  (defvar my-evil-force-normal-state-hook '())
  (defun my-evil-run-force-normal-state-hook-after-a (&rest _)
    (run-hooks 'my-evil-force-normal-state-hook))

  (defun my-starhugger-inline-mode-h ()
    (add-hook 'my-evil-force-normal-state-hook #'starhugger-dismiss-suggestion nil t))

  (add-hook 'starhugger-inline-mode-hook #'my-starhugger-inline-mode-h))

#+end_src



** Notes


Remember to set ~starhugger-api-token~ (from [[https://huggingface.co/settings/tokens]]), otherwise you may easily get hit by the limit rate.

Demo: [[https://www.reddit.com/r/emacs/comments/13l9cm1/starhuggerel_now_displays_suggestions_as_overlays/]].

*** Known quirks

Emacs overlays are used under the hood to display inline suggestion, there are some shortcomings with this approach:

- Not possible to display PRE|<ov>SUF without using 2 different types of overlay properties when SUF isn't emtpy (in the middle of the buffer) and empty (at buffer end)

- At the end of the buffer (overlaystart = overlay-end), the overlay's ~keymap~ property doesn't work

* TODO

- ✓ Support setting parameters at [[https://huggingface.co/docs/api-inference/detailed_parameters#text-generation-task]]

- ✓ VSCode-like previewing overlays: take after [[https://github.com/zerolfx/copilot.el]]

- ✓ Switching suggestion

- ✓ Accept suggestion partially by words or lines

- ✓ Let ~starhugger-trigger-suggestion~ fetch about 3 suggestions to quickly cycle

- ✓ Fill-in-the-middle support  [[https://github.com/huggingface/huggingface-vscode]]: <fim_prefix>〈code before〉<fim_suffix>〈code after〉<fim_middle>

- ? More robust and reliable method to show a different suggestion

- ½ /Batch-previewing multiple suggestions, maybe with syntax highlighting/

- ✓ Unaccept suggestion partially (by moving real text back to suggestion)

- ½ Support for auto-completing when typing: investigate Emacs's built-in ~completion-at-point-functions~'s asynchronous capabilities, or another framework?

- ? How about Transformers Agents [[https://huggingface.co/docs/transformers/transformers_agents]]?
